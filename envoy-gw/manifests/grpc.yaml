apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: yages
    example: grpc-routing
  name: yages
spec:
  selector:
    matchLabels:
      app: yages
  replicas: 1
  template:
    metadata:
      labels:
        app: yages
    spec:
      containers:
        - name: grpcsrv
          image: anjia0532/ghcr.projectcontour.yages:v0.1.0
          ports:
            - containerPort: 9000
              protocol: TCP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: yages
    example: grpc-routing
  name: yages
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 9000
      protocol: TCP
      targetPort: 9000
  selector:
    app: yages
---
apiVersion: gateway.networking.k8s.io/v1alpha2
kind: GRPCRoute   # Grpc路由定义
metadata:
  name: yages
  labels:
    example: grpc-routing
spec:
  parentRefs:
    - name: eg-gw
  hostnames:
    - "grpc-example.com"
  rules:
    - backendRefs:
        - group: ""
          kind: Service
          name: yages
          port: 9000
          weight: 1

## 测试连通性
# $ grpcurl -plaintext -authority=grpc-example.com 192.168.136.100:80 yages.Echo/Ping
# {
#  "text": "pong"
# }          
---


# 我们还可以对Grpc进行路由匹配
apiVersion: gateway.networking.k8s.io/v1alpha2
kind: GRPCRoute
metadata:
  name: yages
  labels:
    example: grpc-routing
spec:
  parentRefs:
    - name: example-gateway
  hostnames:
    - "grpc-example.com"
  rules:
    # 每个Match都是独立的,即如果满足任何一个Match,则将匹配该规则
    - matches:
      # grpc方法匹配
      - method:
          method: ServerReflectionInfo
          service: grpc.reflection.v1alpha.ServerReflection
      # type为空默认代表精确匹配
      - method:
          method: Ping
      # 我们还可以将type指定为正则匹配
      - method:
          method: "Pin.+"
          service: ".*.Echo"
          type: RegularExpression
      backendRefs:
        - group: ""
          kind: Service
          name: yages
          port: 9000
          weight: 1
       